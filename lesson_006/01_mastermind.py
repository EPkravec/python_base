# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

import random

one_number = random.randint(0, 9)
two_number = random.randint(0, 9)
fhree_number = random.randint(0, 9)
four_number = random.randint(0, 9)
# TODO где гарантия, что цифры не будут совпадать? По условию не должны
number_comp = str(one_number) + str(two_number) + str(fhree_number) + str(four_number)

print(' Ну что же сыграем в игру ')
print(' ------------------------ ')
print(' Введите четырех значное число')

num = 0
while True:
    num += 1
    print(f'номер попытки {num}')
    number_us = str(input(':'))
    # TODO получается, что пользователь может вывесть значение?
    if number_us == 'check':
        print(number_comp)
        continue
    # TODO кроме этой проверки надо ещ добавить проверку, что все цифры разные.
    if len(number_us) != 4:
        print('Должно быть 4 цифры')
        continue
        
    nu = list(number_us)
    nc = list(number_comp)

    bulls = 0
    for j in range(4):
        if nu[j] == nc[j]:
            bulls += 1
            nu[j] = ''
            nc[j] = '*'

    if bulls == 4:
        print('Вы выграли !')
        break
    
    cows = 0
    for j in range(4):
        entered_digit = nc[j]
        # TODO для проверки вхождения числа в список можно использовать оператор in
        for i in range(4):
            if entered_digit == nc[i]:
                cows += 1
                nc[i] = '*'
                break

    print(f' быков {bulls}')
    print(f' коров {cows}')
